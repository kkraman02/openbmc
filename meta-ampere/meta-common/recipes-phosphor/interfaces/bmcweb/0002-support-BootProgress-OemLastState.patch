From 1592bb337ffa5cdb8686d0c186daac39a977bd68 Mon Sep 17 00:00:00 2001
From: Hieu Huynh <hieuh@os.amperecomputing.com>
Date: Fri, 12 May 2023 10:22:29 +0700
Subject: [PATCH 02/13] support BootProgress OemLastState

Support setting BootProgress OemLastState from the latest PostCodes entry.
This commit also supports to set LastState to Oem when dbus ProgressStages is Oem.

Signed-off-by: Hieu Huynh <hieuh@os.amperecomputing.com>
---
 redfish-core/lib/systems.hpp | 86 ++++++++++++++++++++++++++++++++++++
 1 file changed, 86 insertions(+)

diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index e044c670..b3672ce5 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -43,6 +43,7 @@
 
 #include <array>
 #include <string_view>
+#include <iomanip>
 #include <variant>
 
 namespace redfish
@@ -818,6 +819,12 @@ inline std::string dbusToRfBootProgress(const std::string& dbusBootProgress)
     {
         rfBpLastState = "OSRunning";
     }
+    else if (dbusBootProgress ==
+             "xyz.openbmc_project.State.Boot.Progress.ProgressStages."
+             "OEM")
+    {
+        rfBpLastState = "OEM";
+    }
     else
     {
         BMCWEB_LOG_DEBUG("Unsupported D-Bus BootProgress {}", dbusBootProgress);
@@ -914,6 +921,84 @@ inline void getBootProgress(const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
     });
 }
 
+/**
+ * @brief Retrieves boot progress OemLastState of the system
+ *
+ * @param[in] aResp  Shared pointer for generating response message.
+ *
+ * @return None.
+ */
+inline void
+    getBootProgressOemLastState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    crow::connections::systemBus->async_method_call(
+        [aResp](const boost::system::error_code ec,
+                const std::variant<std::tuple<uint64_t, std::vector<uint8_t>>>&
+                    bootProgressOemLastState) {
+        if (ec)
+        {
+            return;
+        }
+        std::string bootProgressOemLastStateStr = "0x";
+        std::stringstream tmp;
+        uint64_t bootProgress1st;
+        std::vector<uint8_t> bootProgress2nd;
+
+        const std::tuple<uint64_t, std::vector<uint8_t>>*
+            bootProgressOemLastStatePtr =
+                std::get_if<std::tuple<uint64_t, std::vector<uint8_t>>>(
+                    &bootProgressOemLastState);
+        if (bootProgressOemLastStatePtr == nullptr)
+        {
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        /* The OemLastState updated to the PostCodes Boot.Raw:
+         * https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/
+         * xyz/openbmc_project/State/Boot/Raw.interface.yaml#L6
+         * The type of the Boot.Raw value is struct[uint64,array[byte]]
+         */
+        /* Get the first element of the boot progress code, uint64 type */
+        bootProgress1st = std::get<0>(*bootProgressOemLastStatePtr);
+        /* Get second element of the boot progress, array[byte] type */
+        bootProgress2nd = std::get<1>(*bootProgressOemLastStatePtr);
+        /* Formatting boot progress code */
+        tmp << std::hex << std::setfill('0');
+
+        /* Set "OemLastState": to "" if there is no boot progress code */
+        if (bootProgress1st == 0)
+        {
+            bootProgressOemLastStateStr = "";
+        }
+        else
+        {
+            /* Get first bytes of the boot progress code */
+            tmp << std::setw(2) << static_cast<uint64_t>(bootProgress1st);
+
+            if (bootProgress2nd.size() != 0)
+            {
+                /* Get the last byte of the boot progress code */
+                for (uint8_t i : bootProgress2nd)
+                {
+                    tmp << std::setw(2) << static_cast<uint16_t>(i);
+                }
+            }
+            /* Padding, Ex: 0x1020304 to 0x01020304 */
+            if (tmp.str().size() % 2)
+                bootProgressOemLastStateStr = "0x0";
+            bootProgressOemLastStateStr += tmp.str();
+        }
+
+        aResp->res.jsonValue["BootProgress"]["OemLastState"] =
+            bootProgressOemLastStateStr;
+        },
+        "xyz.openbmc_project.State.Boot.Raw",
+        "/xyz/openbmc_project/state/boot/raw0",
+        "org.freedesktop.DBus.Properties", "Get",
+        "xyz.openbmc_project.State.Boot.Raw", "Value");
+}
+
 /**
  * @brief Retrieves boot progress Last Update of the system
  *
@@ -3338,6 +3423,7 @@ inline void
     getHostState(asyncResp);
     getBootProperties(asyncResp);
     getBootProgress(asyncResp);
+    getBootProgressOemLastState(asyncResp);
     getBootProgressLastStateTime(asyncResp);
     pcie_util::getPCIeDeviceList(asyncResp, "PCIeDevices");
     getHostWatchdogTimer(asyncResp);
-- 
2.34.1

