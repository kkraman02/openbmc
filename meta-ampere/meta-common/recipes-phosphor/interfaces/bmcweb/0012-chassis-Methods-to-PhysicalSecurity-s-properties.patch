From 6ded4fbbd49ee7a8b307452eca96a5f87cd051b8 Mon Sep 17 00:00:00 2001
From: Chau Ly <chaul@amperecomputing.com>
Date: Wed, 19 Jul 2023 08:42:18 +0000
Subject: [PATCH 12/13] chassis: Methods to PhysicalSecurity's properties

This commit handles GET method to IntrusionSensorReArm property under
PhysicalSecurity. Moreover, Redfish Data Model Specification says about
IntrusionSensor that "If the IntrusionSensorReArm property contains
Manual a client may set this property to Normal to reset the physical
security state". This will handle PATCH to IntrusionSensor under
PhysicalSecurity.

This commit also deprecates IntrusionSensorNumber property as Redfish
schema v1.22 specified "IntrusionSensorNumber has been deprecated in
order to allow for multiple physical sensors to construct this object".
Moreover, it was previously hardcoded to 1, so there are no clients
that could be using this, and per COMPATIBILITY.md, this is not a
compatibility break.

Tested: On Ampere Mt.Mitchell using dbus-sensors intrusionsensor with
Aspeed2600_Hwmon method, rearm mode is Manual.

- Normal situation:

$ curl -X GET -u root:0penBmc --insecure \
     https://${BMC_IP}/redfish/v1/Chassis/chassis

...
"PhysicalSecurity": {
    "IntrusionSensor": "Normal",
    "IntrusionSensorReArm": "Manual"
},
...

- Chassis intrusion detected, the above result will be:

"PhysicalSecurity": {
    "IntrusionSensor": "HardwareIntrusion",
    "IntrusionSensorReArm": "Manual"
}

- Manually rearm the sensor:

$ curl -X PATCH --user root:0penBmc -H \
"Content-Type: application/json" --insecure \
https://${BMC_IP}/redfish/v1/Chassis/chassis -d \
'{ "PhysicalSecurity": { "IntrusionSensor": "Normal"} }'

{
  "@Message.ExtendedInfo": [
    {
      "@odata.type": "#Message.v1_1_1.Message",
      "Message": "The request completed successfully.",
      "MessageArgs": [],
      "MessageId": "Base.1.16.0.Success",
      "MessageSeverity": "OK",
      "Resolution": "None"
    }
  ]
}

The result will be as in normal situation

- If rearm the sensor from a non-primary chassis

$ curl -X PATCH --user root:0penBmc -H \
"Content-Type: application/json" --insecure \
https://${BMC_IP}/redfish/v1/Chassis/<non-primary-chassis> -d \
'{ "PhysicalSecurity": { "IntrusionSensor": "Normal"} }'

Error will be displayed as:

"MessageArgs": [
    "Setting IntrusionSensor from a non-primary chassis"
],
"MessageId": "Base.1.16.0.ActionNotSupported"

Change-Id: If50332a1e55f2bafcf395e0d313b7d58b35c55cd
Signed-off-by: Chau Ly <chaul@amperecomputing.com>
---
 redfish-core/lib/chassis.hpp | 269 +++++++++++++++++++++++++++++++----
 1 file changed, 239 insertions(+), 30 deletions(-)

diff --git a/redfish-core/lib/chassis.hpp b/redfish-core/lib/chassis.hpp
index 72f5011d..cb3a2e93 100644
--- a/redfish-core/lib/chassis.hpp
+++ b/redfish-core/lib/chassis.hpp
@@ -19,6 +19,7 @@
 
 #include "app.hpp"
 #include "dbus_utility.hpp"
+#include "generated/enums/chassis.hpp"
 #include "health.hpp"
 #include "led.hpp"
 #include "query.hpp"
@@ -35,11 +36,116 @@
 #include <sdbusplus/unpack_properties.hpp>
 
 #include <array>
+#include <memory>
 #include <ranges>
+#include <string>
 #include <string_view>
 
 namespace redfish
 {
+/**
+ * @brief Convert chassis intrusion sensor status string on DBus to Redfish
+ *
+ * @param[in] status - Status property string on DBus.
+ *
+ * @return An optional of chassis::IntrusionSensor enum.
+ */
+inline std::optional<chassis::IntrusionSensor>
+    dbusChassisIntrusionStatusToRf(std::string_view status)
+{
+    if (status == "xyz.openbmc_project.Chassis.Intrusion.Status.Normal")
+    {
+        return chassis::IntrusionSensor::Normal;
+    }
+    if (status ==
+        "xyz.openbmc_project.Chassis.Intrusion.Status.HardwareIntrusion")
+    {
+        return chassis::IntrusionSensor::HardwareIntrusion;
+    }
+    if (status ==
+        "xyz.openbmc_project.Chassis.Intrusion.Status.TamperingDetected")
+    {
+        return chassis::IntrusionSensor::TamperingDetected;
+    }
+    if (status == "xyz.openbmc_project.Chassis.Intrusion.Status.Unknown")
+    {
+        return std::nullopt;
+    }
+    return chassis::IntrusionSensor::Invalid;
+}
+
+/**
+ * @brief Convert chassis intrusion sensor rearm mode string on DBus to Redfish
+ *
+ * @param[in] rearmMode - Rearm property string on DBus.
+ *
+ * @return A value of chassis::IntrusionSensorReArm enum.
+ */
+inline chassis::IntrusionSensorReArm
+    dbusChassisIntrusionRearmModeToRf(std::string_view rearmMode)
+{
+    if (rearmMode == "xyz.openbmc_project.Chassis.Intrusion.RearmMode.Manual")
+    {
+        return chassis::IntrusionSensorReArm::Manual;
+    }
+    if (rearmMode ==
+        "xyz.openbmc_project.Chassis.Intrusion.RearmMode.Automatic")
+    {
+        return chassis::IntrusionSensorReArm::Automatic;
+    }
+    return chassis::IntrusionSensorReArm::Invalid;
+}
+
+/**
+ * Translate DBus property values to Redfish and fill PhysicalSecurity's data
+ */
+inline void handlePhysicalSecurityProperties(
+    crow::Response& resp, const dbus::utility::DBusPropertiesMap& propertiesMap)
+{
+    std::string status;
+    std::string rearmMode;
+
+    const bool success = sdbusplus::unpackPropertiesNoThrow(
+        dbus_utils::UnpackErrorPrinter(), propertiesMap, "Status", status,
+        "Rearm", rearmMode);
+
+    if (!success)
+    {
+        messages::internalError(resp);
+        return;
+    }
+
+    std::optional<chassis::IntrusionSensor> intrusionSensor =
+        dbusChassisIntrusionStatusToRf(status);
+
+    if (!intrusionSensor)
+    {
+        BMCWEB_LOG_WARNING("Unknown ChassisIntrusionStatus: {}", status);
+    }
+    else
+    {
+        if (*intrusionSensor == chassis::IntrusionSensor::Invalid)
+        {
+            BMCWEB_LOG_ERROR("Invalid ChassisIntrusionStatus: {}", status);
+            messages::internalError(resp);
+            return;
+        }
+        resp.jsonValue["PhysicalSecurity"]["IntrusionSensor"] =
+            *intrusionSensor;
+    }
+
+    chassis::IntrusionSensorReArm intrusionSensorReArm =
+        dbusChassisIntrusionRearmModeToRf(rearmMode);
+
+    if (intrusionSensorReArm == chassis::IntrusionSensorReArm::Invalid)
+    {
+        BMCWEB_LOG_ERROR("Invalid ChassisIntrusionRearmMode: {}", rearmMode);
+        messages::internalError(resp);
+        return;
+    }
+    resp.jsonValue["PhysicalSecurity"]["IntrusionSensorReArm"] =
+        intrusionSensorReArm;
+}
 
 /**
  * @brief Retrieves resources over dbus to link to the chassis
@@ -143,44 +249,49 @@ inline void handlePhysicalSecurityGetSubTree(
     const boost::system::error_code& ec,
     const dbus::utility::MapperGetSubTreeResponse& subtree)
 {
-    if (ec)
+    if (ec || subtree.empty())
     {
         // do not add err msg in redfish response, because this is not
         //     mandatory property
-        BMCWEB_LOG_INFO("DBUS error: no matched iface {}", ec);
+        BMCWEB_LOG_INFO("DBUS error: no matched iface");
         return;
     }
-    // Iterate over all retrieved ObjectPaths.
-    for (const auto& object : subtree)
+
+    // There should be only one place implementing this interface
+    if (subtree.size() > 1)
     {
-        if (!object.second.empty())
-        {
-            const auto service = object.second.front();
+        BMCWEB_LOG_ERROR("Found more than one Intrusion Sensor DBus object");
+        messages::internalError(asyncResp->res);
+        return;
+    }
 
-            BMCWEB_LOG_DEBUG("Get intrusion status by service ");
+    const auto& [objPath, serviceMap] = subtree[0];
 
-            sdbusplus::asio::getProperty<std::string>(
-                *crow::connections::systemBus, service.first, object.first,
-                "xyz.openbmc_project.Chassis.Intrusion", "Status",
-                [asyncResp](const boost::system::error_code& ec1,
-                            const std::string& value) {
-                if (ec1)
-                {
-                    // do not add err msg in redfish response, because this is
-                    // not
-                    //     mandatory property
-                    BMCWEB_LOG_ERROR("DBUS response error {}", ec1);
-                    return;
-                }
-                asyncResp->res
-                    .jsonValue["PhysicalSecurity"]["IntrusionSensorNumber"] = 1;
-                asyncResp->res
-                    .jsonValue["PhysicalSecurity"]["IntrusionSensor"] = value;
-            });
+    if (serviceMap.empty())
+    {
+        BMCWEB_LOG_ERROR(
+            "Error getting service map of Intrusion Sensor object");
+        messages::internalError(asyncResp->res);
+        return;
+    }
 
+    const std::string& service = serviceMap.front().first;
+
+    sdbusplus::asio::getAllProperties(
+        *crow::connections::systemBus, service, objPath,
+        "xyz.openbmc_project.Chassis.Intrusion",
+        [asyncResp](const boost::system::error_code& ec1,
+                    const dbus::utility::DBusPropertiesMap& propertiesMap) {
+        if (ec1)
+        {
+            if (ec1.value() != EBADR)
+            {
+                BMCWEB_LOG_WARNING("DBUS response error for Properties{}", ec1);
+            }
             return;
         }
-    }
+        handlePhysicalSecurityProperties(asyncResp->res, propertiesMap);
+    });
 }
 
 inline void handleChassisCollectionGet(
@@ -640,6 +751,82 @@ inline void
         std::bind_front(handlePhysicalSecurityGetSubTree, asyncResp));
 }
 
+/**
+ * Call set-property method to write to intrusion sensor
+ */
+inline void setIntrusionSensorByService(
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& intrusionSensor, const boost::system::error_code& ec,
+    const dbus::utility::MapperGetSubTreeResponse& subtree)
+{
+    if (ec || subtree.empty())
+    {
+        BMCWEB_LOG_ERROR("DBUS error: no matched iface");
+        messages::internalError(asyncResp->res);
+        return;
+    }
+
+    // There should be only one place implementing this interface
+    if (subtree.size() > 1)
+    {
+        BMCWEB_LOG_ERROR("Found more than one Intrusion Sensor DBus object");
+        messages::internalError(asyncResp->res);
+        return;
+    }
+
+    const auto& [objPath, serviceMap] = subtree[0];
+
+    if (serviceMap.empty())
+    {
+        BMCWEB_LOG_ERROR(
+            "Error getting service map of Intrusion Sensor object");
+        messages::internalError(asyncResp->res);
+        return;
+    }
+
+    const std::string& service = serviceMap.front().first;
+
+    sdbusplus::asio::setProperty(
+        *crow::connections::systemBus, service, objPath,
+        "xyz.openbmc_project.Chassis.Intrusion", "Status", intrusionSensor,
+        [asyncResp](const boost::system::error_code& ec1) {
+        if (ec1)
+        {
+            BMCWEB_LOG_ERROR("DBUS error: failed to set property");
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        messages::success(asyncResp->res);
+    });
+}
+
+/**
+ * Validate input value of the intrusion sensor and prepare for setting
+ */
+
+inline void handleIntrusionSensorPatch(
+    const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+    const std::string& intrusionSensor)
+{
+    if (intrusionSensor != "Normal")
+    {
+        BMCWEB_LOG_ERROR(
+            "IntrusionSensor property only accepts Normal to reset the physical security state");
+        messages::propertyValueIncorrect(asyncResp->res, "IntrusionSensor",
+                                         intrusionSensor);
+        return;
+    }
+    constexpr std::array<std::string_view, 1> interfaces = {
+        "xyz.openbmc_project.Chassis.Intrusion"};
+
+    const std::string normalStatusDbusStr =
+        "xyz.openbmc_project.Chassis.Intrusion.Status.Normal";
+
+    dbus::utility::getSubTree("/xyz/openbmc_project", 0, interfaces,
+                              std::bind_front(setIntrusionSensorByService,
+                                              asyncResp, normalStatusDbusStr));
+}
+
 inline void
     handleChassisPatch(App& app, const crow::Request& req,
                        const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
@@ -651,6 +838,7 @@ inline void
     }
     std::optional<bool> locationIndicatorActive;
     std::optional<std::string> indicatorLed;
+    std::optional<std::string> intrusionSensor;
 
     if (param.empty())
     {
@@ -659,11 +847,34 @@ inline void
 
     if (!json_util::readJsonPatch(
             req, asyncResp->res, "LocationIndicatorActive",
-            locationIndicatorActive, "IndicatorLED", indicatorLed))
+            locationIndicatorActive, "IndicatorLED", indicatorLed,
+            "PhysicalSecurity/IntrusionSensor", intrusionSensor))
     {
         return;
     }
 
+    const std::string& chassisId = param;
+
+    if (intrusionSensor)
+    {
+        getMainChassisId(
+            asyncResp,
+            [chassisId, intrusionSensor](
+                const std::string& mainChassisId,
+                const std::shared_ptr<bmcweb::AsyncResp>& asyncResp2) {
+            if (chassisId != mainChassisId)
+            {
+                BMCWEB_LOG_ERROR(
+                    "Patching to IntrusionSensor not from a primary chassis");
+                messages::actionNotSupported(
+                    asyncResp2->res,
+                    "Setting IntrusionSensor from a non-primary chassis");
+                return;
+            }
+            handleIntrusionSensorPatch(asyncResp2, *intrusionSensor);
+        });
+    }
+
     // TODO (Gunnar): Remove IndicatorLED after enough time has passed
     if (!locationIndicatorActive && !indicatorLed)
     {
@@ -680,8 +891,6 @@ inline void
         "xyz.openbmc_project.Inventory.Item.Board",
         "xyz.openbmc_project.Inventory.Item.Chassis"};
 
-    const std::string& chassisId = param;
-
     dbus::utility::getSubTree(
         "/xyz/openbmc_project/inventory", 0, interfaces,
         [asyncResp, chassisId, locationIndicatorActive,
-- 
2.34.1

